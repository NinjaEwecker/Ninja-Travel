{"remainingRequest":"/Users/ninjameyer/Desktop/HamburgerCodingSchool/Vue-Travelblog/node_modules/babel-loader/lib/index.js!/Users/ninjameyer/Desktop/HamburgerCodingSchool/Vue-Travelblog/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/ninjameyer/Desktop/HamburgerCodingSchool/Vue-Travelblog/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ninjameyer/Desktop/HamburgerCodingSchool/Vue-Travelblog/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/ninjameyer/Desktop/HamburgerCodingSchool/Vue-Travelblog/node_modules/@fawmi/vue-google-maps/src/components/autocomplete.vue?vue&type=template&id=5b7498ca","dependencies":[{"path":"/Users/ninjameyer/Desktop/HamburgerCodingSchool/Vue-Travelblog/node_modules/@fawmi/vue-google-maps/src/components/autocomplete.vue","mtime":499162500000},{"path":"/Users/ninjameyer/Desktop/HamburgerCodingSchool/Vue-Travelblog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ninjameyer/Desktop/HamburgerCodingSchool/Vue-Travelblog/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/ninjameyer/Desktop/HamburgerCodingSchool/Vue-Travelblog/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/Users/ninjameyer/Desktop/HamburgerCodingSchool/Vue-Travelblog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ninjameyer/Desktop/HamburgerCodingSchool/Vue-Travelblog/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgdG9IYW5kbGVycyBhcyBfdG9IYW5kbGVycywgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrIH0gZnJvbSAidnVlIjsKZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soImlucHV0IiwgX21lcmdlUHJvcHMoewogICAgcmVmOiAiaW5wdXQiCiAgfSwgX2N0eC4kYXR0cnMsIF90b0hhbmRsZXJzKF9jdHguJGF0dHJzKSksIG51bGwsIDE2CiAgLyogRlVMTF9QUk9QUyAqLwogICk7Cn0="},{"version":3,"sources":["/Users/ninjameyer/Desktop/HamburgerCodingSchool/Vue-Travelblog/node_modules/@fawmi/vue-google-maps/src/components/autocomplete.vue"],"names":[],"mappings":";;uBACE,YAAA,CAAmD,OAAnD,EAAA,WAAA,CAAmD;AAA5C,IAAA,GAAG,EAAC;AAAwC,GAAnD,EAA2B,IAAA,CAAA,MAA3B,EAAmC,WAAA,CAAa,IAAA,CAAD,MAAZ,CAAnC,CAAA,EAA+C,IAA/C,EAA+C;AAAA;AAA/C,G","sourcesContent":["<template>\n  <input ref=\"input\" v-bind=\"$attrs\" v-on=\"$attrs\" />\n</template>\n\n<script>\nimport { bindProps, getPropsValues } from '../utils/bindProps.js'\nimport downArrowSimulator from '../utils/simulateArrowDown.js'\nimport { mappedPropsToVueProps } from './build-component'\n\nconst mappedProps = {\n  bounds: {\n    type: Object,\n  },\n  componentRestrictions: {\n    type: Object,\n    // Do not bind -- must check for undefined\n    // in the property\n    noBind: true,\n  },\n  types: {\n    type: Array,\n    default: function () {\n      return []\n    },\n  },\n}\n\nconst props = {\n  selectFirstOnEnter: {\n    required: false,\n    type: Boolean,\n    default: false,\n  },\n  options: {\n    type: Object,\n  },\n}\n\nexport default {\n  mounted() {\n    this.$gmapApiPromiseLazy().then(() => {\n      if (this.selectFirstOnEnter) {\n        downArrowSimulator(this.$refs.input)\n      }\n\n      if (typeof google.maps.places.Autocomplete !== 'function') {\n        throw new Error(\n          \"google.maps.places.Autocomplete is undefined. Did you add 'places' to libraries when loading Google Maps?\"\n        )\n      }\n\n      /* eslint-disable no-unused-vars */\n      const finalOptions = {\n        ...getPropsValues(this, mappedProps),\n        ...this.options,\n      }\n\n      this.$autocomplete = new google.maps.places.Autocomplete(this.$refs.input, finalOptions)\n      bindProps(this, this.$autocomplete, mappedProps)\n\n      this.$watch('componentRestrictions', (v) => {\n        if (v !== undefined) {\n          this.$autocomplete.setComponentRestrictions(v)\n        }\n      })\n\n      // Not using `bindEvents` because we also want\n      // to return the result of `getPlace()`\n      this.$autocomplete.addListener('place_changed', () => {\n        this.$emit('place_changed', this.$autocomplete.getPlace())\n      })\n    })\n  },\n  props: {\n    ...mappedPropsToVueProps(mappedProps),\n    ...props,\n  },\n}\n</script>\n"],"sourceRoot":""}]}